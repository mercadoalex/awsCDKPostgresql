"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pg_1 = require("pg");
const AWS = require("aws-sdk");
const response = require("cfn-response");
const secretsManager = new AWS.SecretsManager();
exports.handler = async (event, context) => {
    console.log('Received event:', JSON.stringify(event, null, 2));
    const secretName = process.env.DB_SECRET_NAME;
    if (!secretName) {
        const errorMessage = 'DB_SECRET_NAME environment variable is not set';
        console.error(errorMessage);
        response.send(event, context, response.FAILED, { message: errorMessage });
        return;
    }
    try {
        const secretValue = await secretsManager.getSecretValue({ SecretId: secretName }).promise();
        if (!secretValue.SecretString) {
            const errorMessage = 'SecretString is empty';
            console.error(errorMessage);
            response.send(event, context, response.FAILED, { message: errorMessage });
            return;
        }
        const secret = JSON.parse(secretValue.SecretString);
        const client = new pg_1.Client({
            host: process.env.DB_HOST,
            port: 5432,
            user: secret.username,
            password: secret.password,
            database: secret.dbname,
        });
        await client.connect();
        const createTableQuery = `
      CREATE TABLE IF NOT EXISTS Employee (
        ID SERIAL PRIMARY KEY,
        FirstName VARCHAR(50),
        LastName VARCHAR(50),
        ZIP VARCHAR(10),
        Country VARCHAR(50),
        Salary INTEGER
      );
    `;
        const insertDataQuery = `
      INSERT INTO Employee (FirstName, LastName, ZIP, Country, Salary) VALUES
      ('John', 'Doe', '12345', 'USA', 50000),
      ('Jane', 'Smith', '54321', 'USA', 60000),
      ('Alice', 'Johnson', '67890', 'Canada', 70000);
    `;
        try {
            await client.query(createTableQuery);
            await client.query(insertDataQuery);
        }
        catch (error) {
            console.error('Error executing queries', error);
            response.send(event, context, response.FAILED, { message: 'Error executing queries' });
            return;
        }
        finally {
            await client.end();
        }
        // Send success response to CloudFormation
        response.send(event, context, response.SUCCESS, {
            statusCode: 200,
            body: JSON.stringify('Database initialized successfully!'),
        });
    }
    catch (error) {
        console.error('Error:', error);
        // Send failure response to CloudFormation
        response.send(event, context, response.FAILED, {
            statusCode: 500,
            body: JSON.stringify('Error initializing database'),
        });
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbGl6ZS1kYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluaXRpYWxpemUtZGIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQkFBNEI7QUFDNUIsK0JBQStCO0FBQy9CLHlDQUF5QztBQUV6QyxNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUVoRCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFVLEVBQUUsT0FBWSxFQUFFLEVBQUU7SUFDbkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUvRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQztJQUU5QyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDaEIsTUFBTSxZQUFZLEdBQUcsZ0RBQWdELENBQUM7UUFDdEUsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM1QixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQzFFLE9BQU87SUFDVCxDQUFDO0lBRUQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxXQUFXLEdBQUcsTUFBTSxjQUFjLENBQUMsY0FBYyxDQUFDLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFNUYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUM5QixNQUFNLFlBQVksR0FBRyx1QkFBdUIsQ0FBQztZQUM3QyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzVCLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7WUFDMUUsT0FBTztRQUNULENBQUM7UUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVwRCxNQUFNLE1BQU0sR0FBRyxJQUFJLFdBQU0sQ0FBQztZQUN4QixJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPO1lBQ3pCLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLE1BQU0sQ0FBQyxRQUFRO1lBQ3JCLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUTtZQUN6QixRQUFRLEVBQUUsTUFBTSxDQUFDLE1BQU07U0FDeEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFdkIsTUFBTSxnQkFBZ0IsR0FBRzs7Ozs7Ozs7O0tBU3hCLENBQUM7UUFFRixNQUFNLGVBQWUsR0FBRzs7Ozs7S0FLdkIsQ0FBQztRQUVGLElBQUksQ0FBQztZQUNILE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDaEQsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZGLE9BQU87UUFDVCxDQUFDO2dCQUFTLENBQUM7WUFDVCxNQUFNLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNyQixDQUFDO1FBRUQsMENBQTBDO1FBQzFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQzlDLFVBQVUsRUFBRSxHQUFHO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsb0NBQW9DLENBQUM7U0FDM0QsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUUvQiwwQ0FBMEM7UUFDMUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDN0MsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyw2QkFBNkIsQ0FBQztTQUNwRCxDQUFDLENBQUM7SUFDTCxDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xpZW50IH0gZnJvbSAncGcnO1xuaW1wb3J0ICogYXMgQVdTIGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0ICogYXMgcmVzcG9uc2UgZnJvbSAnY2ZuLXJlc3BvbnNlJztcblxuY29uc3Qgc2VjcmV0c01hbmFnZXIgPSBuZXcgQVdTLlNlY3JldHNNYW5hZ2VyKCk7XG5cbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudDogYW55LCBjb250ZXh0OiBhbnkpID0+IHtcbiAgY29uc29sZS5sb2coJ1JlY2VpdmVkIGV2ZW50OicsIEpTT04uc3RyaW5naWZ5KGV2ZW50LCBudWxsLCAyKSk7XG5cbiAgY29uc3Qgc2VjcmV0TmFtZSA9IHByb2Nlc3MuZW52LkRCX1NFQ1JFVF9OQU1FO1xuXG4gIGlmICghc2VjcmV0TmFtZSkge1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9ICdEQl9TRUNSRVRfTkFNRSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBub3Qgc2V0JztcbiAgICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgcmVzcG9uc2Uuc2VuZChldmVudCwgY29udGV4dCwgcmVzcG9uc2UuRkFJTEVELCB7IG1lc3NhZ2U6IGVycm9yTWVzc2FnZSB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHNlY3JldFZhbHVlID0gYXdhaXQgc2VjcmV0c01hbmFnZXIuZ2V0U2VjcmV0VmFsdWUoeyBTZWNyZXRJZDogc2VjcmV0TmFtZSB9KS5wcm9taXNlKCk7XG5cbiAgICBpZiAoIXNlY3JldFZhbHVlLlNlY3JldFN0cmluZykge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gJ1NlY3JldFN0cmluZyBpcyBlbXB0eSc7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICByZXNwb25zZS5zZW5kKGV2ZW50LCBjb250ZXh0LCByZXNwb25zZS5GQUlMRUQsIHsgbWVzc2FnZTogZXJyb3JNZXNzYWdlIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNlY3JldCA9IEpTT04ucGFyc2Uoc2VjcmV0VmFsdWUuU2VjcmV0U3RyaW5nKTtcblxuICAgIGNvbnN0IGNsaWVudCA9IG5ldyBDbGllbnQoe1xuICAgICAgaG9zdDogcHJvY2Vzcy5lbnYuREJfSE9TVCxcbiAgICAgIHBvcnQ6IDU0MzIsXG4gICAgICB1c2VyOiBzZWNyZXQudXNlcm5hbWUsXG4gICAgICBwYXNzd29yZDogc2VjcmV0LnBhc3N3b3JkLFxuICAgICAgZGF0YWJhc2U6IHNlY3JldC5kYm5hbWUsXG4gICAgfSk7XG5cbiAgICBhd2FpdCBjbGllbnQuY29ubmVjdCgpO1xuXG4gICAgY29uc3QgY3JlYXRlVGFibGVRdWVyeSA9IGBcbiAgICAgIENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIEVtcGxveWVlIChcbiAgICAgICAgSUQgU0VSSUFMIFBSSU1BUlkgS0VZLFxuICAgICAgICBGaXJzdE5hbWUgVkFSQ0hBUig1MCksXG4gICAgICAgIExhc3ROYW1lIFZBUkNIQVIoNTApLFxuICAgICAgICBaSVAgVkFSQ0hBUigxMCksXG4gICAgICAgIENvdW50cnkgVkFSQ0hBUig1MCksXG4gICAgICAgIFNhbGFyeSBJTlRFR0VSXG4gICAgICApO1xuICAgIGA7XG5cbiAgICBjb25zdCBpbnNlcnREYXRhUXVlcnkgPSBgXG4gICAgICBJTlNFUlQgSU5UTyBFbXBsb3llZSAoRmlyc3ROYW1lLCBMYXN0TmFtZSwgWklQLCBDb3VudHJ5LCBTYWxhcnkpIFZBTFVFU1xuICAgICAgKCdKb2huJywgJ0RvZScsICcxMjM0NScsICdVU0EnLCA1MDAwMCksXG4gICAgICAoJ0phbmUnLCAnU21pdGgnLCAnNTQzMjEnLCAnVVNBJywgNjAwMDApLFxuICAgICAgKCdBbGljZScsICdKb2huc29uJywgJzY3ODkwJywgJ0NhbmFkYScsIDcwMDAwKTtcbiAgICBgO1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeShjcmVhdGVUYWJsZVF1ZXJ5KTtcbiAgICAgIGF3YWl0IGNsaWVudC5xdWVyeShpbnNlcnREYXRhUXVlcnkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBleGVjdXRpbmcgcXVlcmllcycsIGVycm9yKTtcbiAgICAgIHJlc3BvbnNlLnNlbmQoZXZlbnQsIGNvbnRleHQsIHJlc3BvbnNlLkZBSUxFRCwgeyBtZXNzYWdlOiAnRXJyb3IgZXhlY3V0aW5nIHF1ZXJpZXMnIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBhd2FpdCBjbGllbnQuZW5kKCk7XG4gICAgfVxuXG4gICAgLy8gU2VuZCBzdWNjZXNzIHJlc3BvbnNlIHRvIENsb3VkRm9ybWF0aW9uXG4gICAgcmVzcG9uc2Uuc2VuZChldmVudCwgY29udGV4dCwgcmVzcG9uc2UuU1VDQ0VTUywge1xuICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoJ0RhdGFiYXNlIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseSEnKSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvcik7XG5cbiAgICAvLyBTZW5kIGZhaWx1cmUgcmVzcG9uc2UgdG8gQ2xvdWRGb3JtYXRpb25cbiAgICByZXNwb25zZS5zZW5kKGV2ZW50LCBjb250ZXh0LCByZXNwb25zZS5GQUlMRUQsIHtcbiAgICAgIHN0YXR1c0NvZGU6IDUwMCxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KCdFcnJvciBpbml0aWFsaXppbmcgZGF0YWJhc2UnKSxcbiAgICB9KTtcbiAgfVxufTsiXX0=